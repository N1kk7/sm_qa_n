// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_URL")
}

model Period {
  id          String   @id @default(uuid())
  startDate   DateTime
  endDate     DateTime
  employeeIds String[]
  employees   Employee[]
  tasks       Task[]
  tweets      Tweet[]
}

model Employee {
  id        String     @id @default(uuid())
  name      String  
  position  String  
  email     String     @unique
  schedules Schedule[]
  tasks     Task[] 
  messages  Tweet[]
  periodId  String
  period     Period    @relation(fields: [periodId], references: [id])

}

// model Shift {
//   id         String    @id @default(uuid())
//   name       String
//   schedules  Schedule[]
// }

model Schedule {
  id         String    @id @default(uuid())
  dates      DateTime
  // shiftId    String
  // shift      Shift     @relation(fields: [shiftId], references: [id])
  shiftName  String
  // shiftValue String
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id])

}

// model DateArr {
//   id          String @id @default(uuid())
//   scheduleId  String
//   schedule    Schedule  @relation(fields: [scheduleId], references: [id])
// }

model Task {
  id         String    @id @default(uuid())
  date       DateTime
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id])
  periodId   String
  period     Period    @relation(fields: [periodId], references: [id])
  taskStatus String
  description String
}

model Tweet {
  id          String   @id @default(uuid())
  date        DateTime
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  firstTimeSt String
  complTimeSt String
  timestamp   String
  connectProf String?
  complBy     String
  platform    String
  content     String
  nativeLink  String
  permalink   String
  periodId    String
  period      Period   @relation(fields: [periodId], references: [id])
  replies     TweetReply[]
}

model TweetReply {
  id          String   @id @default(uuid())
  tweetId     String
  tweet       Tweet    @relation(fields: [tweetId], references: [id])
  checkStatus String
  standFormat String
  comment     String?
}

